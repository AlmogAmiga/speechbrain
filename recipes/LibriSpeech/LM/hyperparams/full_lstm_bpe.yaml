# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 2223
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/RNN/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files
data_folder: !PLACEHOLDER # e.g, /localscratch/LibriSpeech
filename: lm_corpus.pkl
hdf5_train: !ref <data_folder>/<filename>

# Training audio text (used for BPE tokenizer)
train_splits: ["train-clean-100", "train-clean-360", "train-other-500"]
dev_split: dev-clean
csv_label: !ref <data_folder>/train-960.csv
csv_valid: !ref <data_folder>/<dev_split>.csv

# Tokenizer model
tok_mdl_file: /home/jianyuan/scratch/rnnLM/1000_unigram.model
tok_voc_file: /home/jianyuan/scratch/rnnLM/1000_unigram.vocab

# Training parameters
number_of_epochs: 20
batch_size: 32
lr: 0.001
accu_steps: 16 # Gradient accumulation to simulate large batch training
device: 'cpu'
multigpu: False
stepwise_annealing: False
load_subwrd_directly: True
saving_interval: 10000

# Model parameters
emb_size: 128
activation: !name:torch.nn.LeakyReLU
dropout: 0.0
rnn_layers: 2
rnn_neurons: 2048
dnn_blocks: 1
dnn_neurons: 512

# Outputs
output_neurons: 1000 # index(blank/eos/bos) = 0
blank_index: 0
bos_index: 0
eos_index: 0

# BPE
# Specify the bos_id/eos_id if different with blank_id
bpe_tokenizer: !new:speechbrain.tokenizers.SentencePiece.SentencePiece
    model_dir: !ref <save_folder>
    vocab_size: !ref <output_neurons>
    csv_train: !ref <csv_label>
    csv_read: char
    char_format_input: True
    model_type: "unigram" # ["unigram", "bpe", "char"]
    character_coverage: 1.0 # for language with large set of chars use 0.9995

# Functions
model: !new:speechbrain.lobes.models.RNNLM.RNNLM
    output_neurons: !ref <output_neurons>
    embedding_dim: !ref <emb_size>
    activation: !ref <activation>
    dropout: !ref <dropout>
    rnn_layers: !ref <rnn_layers>
    rnn_neurons: !ref <rnn_neurons>
    dnn_blocks: !ref <dnn_blocks>
    dnn_neurons: !ref <dnn_neurons>

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

optimizer: !new:speechbrain.nnet.optimizers.Adam_Optimizer
    learning_rate: !ref <lr>

lr_annealing: !new:speechbrain.nnet.lr_schedulers.NewBobLRScheduler
    improvement_threshold: 0.0025
    annealing_factor: 0.8
    patient: 0

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

label_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <csv_label>
    batch_size: !ref <batch_size>
    sentence_sorting: ascending # This must be the same as the ASR recipe
    output_folder: !ref <output_folder>
    csv_read: [char]
    num_workers: 0
    drop_last: True

resumable: !new:speechbrain.data_io.data_io.ResumableRandomSampler
    data_source: !ref <hdf5_train>

train_loader: !new:speechbrain.data_io.data_io.HDF5DataLoaderFactory
    hdf5_file: !ref <hdf5_train>
    # label_dict_file: !ref <output_folder>/label_dict.pkl
    batch_size: !ref <batch_size>
    sentence_sorting: random
    sort_by: subwrd
    output_folder: !ref <output_folder>
    data_entries: [subwrd]
    num_workers: 0
    cache_in_ram: True
    drop_last: True

valid_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <csv_valid>
    batch_size: !ref <batch_size>
    sentence_sorting: ascending
    output_folder: !ref <output_folder>
    csv_read: [char]
    num_workers: 0
    drop_last: True

compute_cost: !name:speechbrain.nnet.losses.nll_loss

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>
    summary_fns:
        loss: !name:speechbrain.utils.train_logger.summarize_average
