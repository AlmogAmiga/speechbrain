# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 2223
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/RNN/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files
data_folder: !PLACEHOLDER # e.g, /localscratch/LibriSpeech
filename: lm_corpus.pkl
hdf5_train: !ref <data_folder>/<filename>

# Training audio text (used for BPE tokenizer)
train_splits: ["train-clean-100", "train-clean-360", "train-other-500"]
dev_split: dev-clean
csv_label: !ref <data_folder>/train-960.csv
csv_valid: !ref <data_folder>/<dev_split>.csv

# Tokenizer model
tok_mdl_file: https://www.dropbox.com/s/945gmkcwzfnvn1y/5000_unigram.model?dl=1
tok_voc_file: https://www.dropbox.com/s/oqvr68b3mfjyqnt/5000_unigram.vocab?dl=1

# Training parameters
number_of_epochs: 20
batch_size: 128
lr: 1
accu_steps: 4 # Gradient accumulation to simulate large batch training
device: 'cuda'
multigpu: True
stepwise_annealing: True
load_subwrd_directly: True

# Model parameters
emb_size: 128
activation: !name:torch.nn.LeakyReLU
dropout: 0.0
rnn_layers: 2
rnn_neurons: 2048
dnn_blocks: 1
dnn_neurons: 512

# Outputs
output_neurons: 5000
blank_index: 0
bos_index: 1
eos_index: 2
pad_index: 0

# BPE
# Specify the bos_id/eos_id if different with blank_id
bpe_tokenizer: !new:speechbrain.tokenizers.SentencePiece.SentencePiece
    model_dir: !ref <save_folder>
    vocab_size: !ref <output_neurons>
    csv_train: !ref <csv_label>
    csv_read: char
    char_format_input: False
    model_type: "unigram" # ["unigram", "bpe", "char"]
    character_coverage: 1.0 # for language with large set of chars use 0.9995

# Functions
masking_function: !name:speechbrain.lobes.models.transformer.TransformerLM.make_masks # yamllint disable-line rule:line-length
    pad_idx: 0
    look_ahead_mask: True
    padding_mask: True

model: !new:speechbrain.lobes.models.transformer.TransformerLM.TransformerLM # yamllint disable-line rule:line-length
    masking_func: !ref <masking_function>
    vocab: !ref <output_neurons>
    d_model: 512
    nhead: 8
    num_encoder_layers: 16
    num_decoder_layers: 0
    d_ffn: 2048
    dropout: 0.1
    activation: !name:torch.nn.GELU
    normalize_before: True

log_softmax: !new:torch.nn.LogSoftmax
    dim: -1

optimizer: !new:speechbrain.nnet.optimizers.Adam_Optimizer
    learning_rate: 0
    betas: (0.9, 0.999)
    eps: 0.000000001

lr_annealing: !new:speechbrain.nnet.lr_schedulers.NoamScheduler
    lr_initial: !ref <lr>
    n_warmup_steps: 25000
    model_size: 512

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

label_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <csv_label>
    batch_size: !ref <batch_size>
    sentence_sorting: ascending # This must be the same as the ASR recipe
    output_folder: !ref <output_folder>
    csv_read: [wrd]
    num_workers: 4

train_loader: !new:speechbrain.data_io.data_io.HDF5DataLoaderFactory
    hdf5_file: !ref <hdf5_train>
    # label_dict_file: !ref <output_folder>/label_dict.pkl
    batch_size: !ref <batch_size>
    sentence_sorting: ascending
    sort_by: subwrd
    output_folder: !ref <output_folder>
    data_entries: [subwrd]
    num_workers: 4
    cache_in_ram: True

valid_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <csv_valid>
    batch_size: !ref <batch_size>
    sentence_sorting: ascending
    output_folder: !ref <output_folder>
    csv_read: [wrd]
    num_workers: 4

compute_cost: !name:speechbrain.nnet.losses.nll_loss

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>
    summary_fns:
        loss: !name:speechbrain.utils.train_logger.summarize_average
