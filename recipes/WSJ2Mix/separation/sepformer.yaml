# ################################
# Model: ConvTasnet for source separation
# Data : WSJ0-2mix-8k-min
# Author: Cem Subakan
# ################################
# Basic parameters
# Seed needs to be set at top of yaml, before objects with parameters are made
#
seed: 1234
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]
experiment_name: 40-dptransf-2x4posenc_16h_gln_Mirco_normbeforenolinnoskip
output_folder: !ref results/<experiment_name>/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
data_folder: ../../../samples/audio_samples/sourcesep_samples
auto_mix_prec: True
device: 'cuda:0'

# Neural Parameters
N_epochs: 200
N_batch: 1
lr: 0.00015
train_onthefly: False
loss_fn: 'sisnr'
progressbar: True
# The path for wsj0-mix data
# wsj0mixpath: !PLACEHOLDER
# The path for the folder which contains wsj0 folder.
# This is used only if the wsj0-mix is not already ready to be used.
# e.g. '/network/tmp1/subakany/wsj0-mix/'
#
wsj0mixpath: '/network/tmp1/subakany/wsj-mix/2speakers/'
tr_csv: 'wsj_tr.csv'
cv_csv: 'wsj_cv.csv'
tt_csv: 'wsj_tt.csv'
sentence_sorting: random
early_stopping_with_patience: -1

train_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <tr_csv>
    batch_size: !ref <N_batch>
    sentence_sorting: !ref <sentence_sorting>
    csv_read: [mix_wav, s1_wav, s2_wav]
    replacements:
        $data_folder: !ref <data_folder>
val_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <cv_csv>
    batch_size: !ref <N_batch>
    sentence_sorting: !ref <sentence_sorting>
    csv_read: [mix_wav, s1_wav, s2_wav]
    replacements:
        $data_folder: !ref <data_folder>
test_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <tt_csv>
    batch_size: !ref <N_batch>
    sentence_sorting: !ref <sentence_sorting>
    csv_read: [mix_wav, s1_wav, s2_wav]
    replacements:
        $data_folder: !ref <data_folder>

use_data_augmentation: True
augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: 8000
    speeds: [95, 100, 105]

N_encoder_out: 256
out_channels: 256
kernel_size: 16
kernel_stride: 8

Encoder: !new:speechbrain.lobes.models.dual_path.Encoder
    kernel_size: !ref <kernel_size>
    out_channels: !ref <N_encoder_out>
# cem: when we run the models let's comment out unused blocks.
# All are provided to give an idea on what's available
# PTtf: !new:speechbrain.lobes.models.dual_pathrnn.PytorchTransformerBlock
#    out_channels: !ref <out_channels>
#    num_layers: 1
#    nhead: 8
#    d_ffn: 2048
#    dropout: 0
#
SBtfintra: !new:speechbrain.lobes.models.dual_path.SBTransformerBlock
    num_layers: 1
    d_model: !ref <out_channels>
    nhead: 16
    d_ffn: 2048
    dropout: 0
    use_positional_encoding: True
    norm_before: True

SBtfinter: !new:speechbrain.lobes.models.dual_path.SBTransformerBlock
    num_layers: 1
    d_model: !ref <out_channels>
    nhead: 16
    d_ffn: 2048
    dropout: 0
    use_positional_encoding: True
    norm_before: True

    # SBModtf: !new:speechbrain.lobes.models.dual_path.ModularTransformerBlock
    #    out_channels: !ref <out_channels>
    #    nhead: 8
    #    num_layers: 3
    #    d_ffn: 2048
    #    dropout: 0
    # FTtf: !new:speechbrain.lobes.models.dual_path.FastTransformerBlock
    #  attention_type: 'reformer'  # this is whatever available on fasttf repo.
    #    out_channels: !ref <out_channels>
    #    num_layers: 1
    #    nhead: 8
    #    d_ffn: 1024
    #    dropout: 0
    # IB: !new:speechbrain.lobes.models.dual_path.IdentityBlock

MaskNet: !new:speechbrain.lobes.models.dual_path.Dual_Path_Model
    in_channels: !ref <N_encoder_out>
    out_channels: !ref <out_channels>
    num_layers: 2
    K: 200
    intra_model: !ref <SBtfintra>
    inter_model: !ref <SBtfinter>
    norm: gln
    linear_layer_after_inter_intra: False
    skip_around_intra: False

Decoder: !new:speechbrain.lobes.models.dual_path.Decoder
    in_channels: !ref <N_encoder_out>
    out_channels: 1
    kernel_size: !ref <kernel_size>
    stride: !ref <kernel_stride>
    bias: False

optimizer: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0

lr_scheduler: !new:speechbrain.nnet.schedulers.ReduceLROnPlateau
    factor: 0.5
    patience: 2

clip_grad_norm: 5

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <N_epochs>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        encoder: !ref <Encoder>
        decoder: !ref <Decoder>
        masknet: !ref <MaskNet>
        optimizer: !ref <optimizer>
        counter: !ref <epoch_counter>
        lr_scheduler: !ref <lr_scheduler>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>
    # summary_fns:
    #    SISNR: !name:speechbrain.utils.train_logger.summarize_error_rate
