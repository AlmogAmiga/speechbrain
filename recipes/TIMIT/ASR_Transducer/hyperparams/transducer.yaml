# ################################
# Model:
#       Encoder: VGG2 + LiGRU with time pooling for efficiency + linear
#       Decoder: embedding + RNN 1 GRU layer + linear
#       Joint: "sum"
#       Output network: linear
# Additions: Transducer architecture
# Authors: Mirco Ravanelli & Peter Plantinga 2020 & Abdelwahab HEBA 2020
# ################################

#data_folder: !PLACEHOLDER  # e.g. /path/to/TIMIT
data_folder: /network/tmp1/abdelwah/TIMIT
ckpts_to_keep: 1
sample_rate: 16000
#seed: !PLACEHOLDER  # e.g, 1234
seed: 1234
output_folder: !ref results/transducer_augment_vgg_ligru/<seed>
predictions_file: !ref <output_folder>/predictions.csv
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files
csv_train: !ref <data_folder>/train.csv
csv_valid: !ref <data_folder>/dev.csv
csv_test: !ref <data_folder>/test.csv

# Neural Parameters
number_of_epochs: 40
batch_size: 8
lr: 1.0
dropout_rate: 0.15
n_mels: 40

device: 'cuda:0'
blank_id: 39

# Functions
encoder_model: !new:speechbrain.lobes.models.CRDNN.CRDNN
    cnn_blocks: 2
    dnn_blocks: 2
    rnn_overrides: {rnn: {rnn_type: ligru}}
    time_pooling: True

encoder_output: !new:speechbrain.nnet.linear.Linear
    n_neurons: 40
    bias: True

decoder_embedding: !new:speechbrain.nnet.embedding.Embedding
    consider_as_one_hot: True # consider blank as zero vect
    blank_id: !ref <blank_id>
    embeddings_dim: !ref <blank_id>

decoder_model: !new:speechbrain.nnet.RNN.RNN
    rnn_type: ligru
    n_neurons: 128
    num_layers: 1
    dropout: 0.15
    normalization: layernorm
    bidirectional: False
    return_hidden: True

# decoder_model1: !new:speechbrain.lobes.models.CRDNN.CRDNN
#     cnn_blocks: 0
#     dnn_blocks: 1
#     rnn_blocks: 0

decoder_output: !new:speechbrain.nnet.linear.Linear
    n_neurons: 40
    bias: True

Tjoint: !new:speechbrain.nnet.transducer.transducer_joint.Transducer_joint
    joint: sum # joint: [sum|concat]

# output_model: !new:speechbrain.lobes.models.CRDNN.CRDNN
#     cnn_blocks: 0
#     dnn_blocks: 1
#     rnn_blocks: 0

output: !new:speechbrain.nnet.linear.Linear
    n_neurons: 40
    bias: False

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

optimizer: !new:speechbrain.nnet.optimizers.Optimize
    optimizer_type: adadelta
    rho: 0.95
    learning_rate: !ref <lr>

lr_annealing: !new:speechbrain.nnet.lr_scheduling.LRScheduler
    annealing_type: newbob
    N_epochs: !ref <number_of_epochs>
    lr_initial: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.8
    patient: 0

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

augmentation: !new:speechbrain.lobes.augment.tdsa.TimeDomainSpecAugment
compute_features: !new:speechbrain.lobes.features.fbank.Fbank

train_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <csv_train>
    batch_size: !ref <batch_size>
    sentence_sorting: ascending
    output_folder: !ref <output_folder>
    csv_read: [wav, phn]

valid_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <csv_valid>
    batch_size: !ref <batch_size>
    sentence_sorting: ascending
    output_folder: !ref <output_folder>
    csv_read: [wav, phn]

test_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <csv_test>
    batch_size: !ref <batch_size>
    sentence_sorting: ascending
    output_folder: !ref <output_folder>
    csv_read: [wav, phn]

compute_cost: !new:speechbrain.nnet.losses.ComputeCost
    cost_type: transducer
    blank_index: 39

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>
    summary_fns:
        loss: !name:speechbrain.utils.train_logger.summarize_average
        PER: !name:speechbrain.utils.train_logger.summarize_error_rate

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        encoder_model: !ref <encoder_model>
        encoder_output: !ref <encoder_output>
        decoder_model: !ref <decoder_model>
        #decoder_model1: !ref <decoder_model1>
        decoder_output: !ref <decoder_output>
        #output_model: !ref <output_model>
        output: !ref <output>
        scheduler: !ref <lr_annealing>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>
