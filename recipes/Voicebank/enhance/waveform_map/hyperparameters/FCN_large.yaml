# ################################
# Model: FCN SE baseline
# From paper: "End-to-End Waveform Utterance Enhancement for Direct Evaluation
# Metrics Optimization by Fully Convolutional Neural Networks", TASLP, 2018
# Authors: Szu-Wei, Fu 2020
# ################################


# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 2234
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]

data_folder: /localscratch/noisy-vctk-16k
test_clean_folder: !ref <data_folder>/clean_testset_wav_16k/

output_folder: !ref ./results/FCN_large/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
enhanced_folder: !ref <output_folder>/FCN_enhanced

# Basic parameters
use_tensorboard: False
tensorboard_logs: !ref <output_folder>/logs/

# FFT paremeters
Sample_rate: 16000
Win_length: 32
Hop_length: 16
N_fft: 512
window_fn: !name:torch.hamming_window

# Data files
csv_train: !ref <data_folder>/train.csv
csv_valid: !ref <data_folder>/valid.csv
csv_test: !ref <data_folder>/test.csv

# Training Parameters
number_of_epochs: 150
N_batch: 1
lr: 0.001
device: 'cuda:0'

# Neural parameters
kernel_size: 55
base_channels: 80

# Data preparation will generate train.csv, dev.csv, and test.csv files
__data_prep: !apply:speechbrain.utils.data_utils.prepare_data
    prep_function: !name:voicebank_prepare.prepare_voicebank
        data_folder: !ref <data_folder>
        save_folder: !ref <data_folder>

train_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <csv_train>
    batch_size: !ref <N_batch>
    csv_read: [noisy_wav, clean_wav]
    sentence_sorting: ascending
    output_folder: !ref <output_folder>

valid_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <csv_valid>
    batch_size: 4
    csv_read: [noisy_wav, clean_wav]
    sentence_sorting: ascending
    replacements:
        $data_folder: !ref <data_folder>

test_loader: !new:speechbrain.data_io.data_io.DataLoaderFactory
    csv_file: !ref <csv_test>
    batch_size: 1
    csv_read: [noisy_wav, clean_wav]
    replacements:
        $data_folder: !ref <data_folder>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

activation: !new:torch.nn.LeakyReLU
    negative_slope: 0.3

model: !new:speechbrain.nnet.containers.Sequential
    input_shape: [!ref <N_batch>, null, 1]
    IN0: !new:speechbrain.nnet.normalization.InstanceNorm1d
        input_size: 1
        track_running_stats: False
        affine: True
    conv1: !name:speechbrain.nnet.CNN.Conv1d
        out_channels: !ref <base_channels>
        kernel_size: !ref <kernel_size>
    IN1: !new:speechbrain.nnet.normalization.InstanceNorm1d
        input_size: !ref <base_channels>
        track_running_stats: False
        affine: True
    act1: !ref <activation>
    conv2: !name:speechbrain.nnet.CNN.Conv1d
        out_channels: !ref <base_channels>
        kernel_size: !ref <kernel_size>
    IN2: !new:speechbrain.nnet.normalization.InstanceNorm1d
        input_size: !ref <base_channels>
        track_running_stats: False
        affine: True
    act12: !ref <activation>
    conv3: !name:speechbrain.nnet.CNN.Conv1d
        out_channels: !ref <base_channels>
        kernel_size: !ref <kernel_size>
    IN3: !new:speechbrain.nnet.normalization.InstanceNorm1d
        input_size: !ref <base_channels>
        track_running_stats: False
        affine: True
    act3: !ref <activation>
    conv4: !name:speechbrain.nnet.CNN.Conv1d
        out_channels: !ref <base_channels>
        kernel_size: !ref <kernel_size>
    IN4: !new:speechbrain.nnet.normalization.InstanceNorm1d
        input_size: !ref <base_channels>
        track_running_stats: False
        affine: True
    act4: !ref <activation>
    conv5: !name:speechbrain.nnet.CNN.Conv1d
        out_channels: !ref <base_channels>
        kernel_size: !ref <kernel_size>
    IN5: !new:speechbrain.nnet.normalization.InstanceNorm1d
        input_size: !ref <base_channels>
        track_running_stats: False
        affine: True
    act5: !ref <activation>
    conv6: !name:speechbrain.nnet.CNN.Conv1d
        out_channels: !ref <base_channels>
        kernel_size: !ref <kernel_size>
    IN6: !new:speechbrain.nnet.normalization.InstanceNorm1d
        input_size: !ref <base_channels>
        track_running_stats: False
        affine: True
    act6: !ref <activation>
    conv7: !name:speechbrain.nnet.CNN.Conv1d
        out_channels: !ref <base_channels>
        kernel_size: !ref <kernel_size>
    IN7: !new:speechbrain.nnet.normalization.InstanceNorm1d
        input_size: !ref <base_channels>
        track_running_stats: False
        affine: True
    act7: !ref <activation>
    conv_out: !name:speechbrain.nnet.CNN.Conv1d
        out_channels: 1
        kernel_size: !ref <kernel_size>

modules:
    model: !ref <model>

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        counter: !ref <epoch_counter>

compute_cost: !name:speechbrain.nnet.losses.mse_loss
compute_STFT: !new:speechbrain.processing.features.STFT
    sample_rate: !ref <Sample_rate>
    win_length: !ref <Win_length>
    hop_length: !ref <Hop_length>
    n_fft: !ref <N_fft>
    window_fn: !ref <window_fn>
compute_ISTFT: !new:speechbrain.processing.features.ISTFT
    sample_rate: !ref <Sample_rate>
    win_length: !ref <Win_length>
    hop_length: !ref <Hop_length>
    window_fn: !ref <window_fn>
mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>
