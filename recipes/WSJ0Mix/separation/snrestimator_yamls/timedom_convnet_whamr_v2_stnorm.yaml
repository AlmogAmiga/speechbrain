# ################################
# Model: SepFormer for source separation
# https://arxiv.org/abs/2010.13154
# Dataset : WSJ0-2mix and WSJ0-3mix
# ################################
#
# Basic parameters
# Seed needs to be set at top of yaml, before objects with parameters are made
#
seed: 1234
__set_seed: !apply:torch.manual_seed [!ref <seed>]

# Data params

# e.g. '/yourpath/wsj0-mix/2speakers'
# end with 2speakers for wsj0-2mix or 3speakers for wsj0-3mix
data_folder: !PLACEHOLDER

# the path for wsj0/si_tr_s/ folder -- only needed if dynamic mixing is used
# e.g. /yourpath/wsj0-processed/si_tr_s/
# you need to convert the original wsj0 to 8k
# you can do this conversion with the script ../meta/preprocess_dynamic_mixing.py
base_folder_dm: /yourpath/wsj0-processed/si_tr_s/
rir_path: /yourpath

experiment_name: snrtrain-timedomain-sbpooling-wwhamr-lessstride-stnorm
output_folder: !ref results/<experiment_name>/<seed>
train_log: !ref <output_folder>/train_log.txt
save_folder: !ref <output_folder>/save
train_data: !ref <save_folder>/libri2mix_train-360.csv
valid_data: !ref <save_folder>/libri2mix_dev.csv
test_data: !ref <save_folder>/libri2mix_test.csv

wsj_data_folder: /network/tmp1/subakany/wham_original
train_wsj_data: !ref <save_folder>/wham_tr.csv
test_wsj_data: !ref <save_folder>/wham_tt.csv
base_folder_dm_whamr: /network/tmp1/subakany/wsj0-processed/si_tr_s
use_whamr_train: True
whamr_proportion: 0.6

test_onwsj: False 

skip_prep: False

ckpt_interval_minutes: 60

# Experiment params
auto_mix_prec: False # Set it to True for mixed precision
test_only: False
num_spks: 2 # set to 3 for wsj0-3mix
progressbar: True
save_audio: False # Save estimated sources on disk
sample_rate: 8000

# Training parameters
N_epochs: 200
batch_size: 1
lr: 0.0001
clip_grad_norm: 5
loss_upper_lim: 999999  # this is the upper limit for an acceptable loss
# if True, the training sequences are cut to a specified length
limit_training_signal_len: False
# this is the length of sequences if we choose to limit
# the signal length of training sequences
training_signal_len: 32000000

# Set it to True to dynamically create mixtures at training time
dynamic_mixing: False
use_wham_noise: True
use_reverb_augment: True 

# Parameters for data augmentation
use_wavedrop: False
use_speedperturb: True
use_speedperturb_sameforeachsource: False
use_rand_shift: False
min_shift: -8000
max_shift: 8000

speedperturb: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    perturb_prob: 1.0
    drop_freq_prob: 0.0
    drop_chunk_prob: 0.0
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

wavedrop: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    perturb_prob: 0.0
    drop_freq_prob: 1.0
    drop_chunk_prob: 1.0
    sample_rate: !ref <sample_rate>

# loss thresholding -- this thresholds the training loss
threshold_byloss: True
threshold: -30

# Encoder parameters
N_encoder_out: 256
out_channels: 256
kernel_size: 16
kernel_stride: 8

# Dataloader options
dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: 0


# Specifying the network
Encoder: !new:speechbrain.lobes.models.dual_path.Encoder
    kernel_size: !ref <kernel_size>
    out_channels: !ref <N_encoder_out>


SBtfintra: !new:speechbrain.lobes.models.dual_path.SBTransformerBlock
    num_layers: 8
    d_model: !ref <out_channels>
    nhead: 8
    d_ffn: 1024
    dropout: 0
    use_positional_encoding: True
    norm_before: True

SBtfinter: !new:speechbrain.lobes.models.dual_path.SBTransformerBlock
    num_layers: 8
    d_model: !ref <out_channels>
    nhead: 8
    d_ffn: 1024
    dropout: 0
    use_positional_encoding: True
    norm_before: True

MaskNet: !new:speechbrain.lobes.models.dual_path.Dual_Path_Model
    num_spks: !ref <num_spks>
    in_channels: !ref <N_encoder_out>
    out_channels: !ref <out_channels>
    num_layers: 2
    K: 250
    intra_model: !ref <SBtfintra>
    inter_model: !ref <SBtfinter>
    norm: ln
    linear_layer_after_inter_intra: False
    skip_around_intra: True

Decoder: !new:speechbrain.lobes.models.dual_path.Decoder
    in_channels: !ref <N_encoder_out>
    out_channels: 1
    kernel_size: !ref <kernel_size>
    stride: !ref <kernel_stride>
    bias: False

snrmin: 0
snrmax : 10
out_n_neurons: 16
use_snr_compression: True
separation_norm_type: stnorm

# compute_features: !new:speechbrain.lobes.features.Fbank
#     n_mels: !ref <n_mels>
#     left_frames: 0
#     right_frames: 0
#     deltas: False

latent_dim: 128
n_inp: 256
classifier_enc: !new:speechbrain.nnet.containers.Sequential
    input_shape: [null, 2, null]
    cnn1: !new:speechbrain.nnet.CNN.Conv1d       
        in_channels: 2
        kernel_size: 4
        out_channels: !ref <latent_dim>
        stride: 1
        skip_transpose: True
        padding: 'valid'
    relu1: !new:torch.nn.ReLU
    cnn2: !new:speechbrain.nnet.CNN.Conv1d
        in_channels: !ref <latent_dim>
        kernel_size: 4
        out_channels: !ref <latent_dim>
        stride: 2
        skip_transpose: True
        padding: 'valid'
    relu2: !new:torch.nn.ReLU
    cnn3: !new:speechbrain.nnet.CNN.Conv1d       
        in_channels: !ref <latent_dim>
        kernel_size: 4
        out_channels: !ref <latent_dim>
        stride: 2
        skip_transpose: True
        padding: 'valid'
    relu3: !new:torch.nn.ReLU
    cnn4: !new:speechbrain.nnet.CNN.Conv1d       
        in_channels: !ref <latent_dim>
        kernel_size: 4
        out_channels: !ref <latent_dim>
        stride: 2
        skip_transpose: True
        padding: 'valid'
    relu4: !new:torch.nn.ReLU
    cnn5: !new:speechbrain.nnet.CNN.Conv1d       
        in_channels: !ref <latent_dim>
        kernel_size: 4
        out_channels: !ref <latent_dim>
        stride: 2
        skip_transpose: True
        padding: 'valid'

stat_pooling: !new:speechbrain.nnet.pooling.StatisticsPooling
        

        # classifier_enc: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
        #     input_size: !ref <n_inp>
        #     channels: [1024, 1024, 1024, 1024, 3072]
        #     kernel_sizes: [5, 3, 3, 3, 1]
        #     dilations: [1, 2, 3, 4, 1]
        #     attention_channels: 128
        #     lin_neurons: 192

#classifier_out: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
#    input_size: 192
#    out_neurons: !ref <out_n_neurons>
#
# classifier_out: !new:speechbrain.nnet.linear.Linear
#     input_size: 256
#     n_neurons: 1

classifier_out: !new:speechbrain.nnet.containers.Sequential
    input_shape: [null, !ref <n_inp>]
    layer1: !new:speechbrain.nnet.linear.Linear
        input_size: !ref <n_inp>
        n_neurons: !ref <n_inp>
    relu: !new:torch.nn.ReLU
    layer2: !new:speechbrain.nnet.linear.Linear
        input_size: !ref <n_inp>
        n_neurons: 1
    sigm: !new:torch.nn.Sigmoid



classifier_loss: !new:torch.nn.CrossEntropyLoss

optimizer: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0

loss: !name:speechbrain.nnet.losses.get_si_snr_with_pitwrapper

lr_scheduler: !new:speechbrain.nnet.schedulers.ReduceLROnPlateau
    factor: 0.5
    patience: 2
    dont_halve_until_epoch: 95

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <N_epochs>

modules:
    encoder: !ref <Encoder>
    decoder: !ref <Decoder>
    masknet: !ref <MaskNet>
    classifier_enc: !ref <classifier_enc>
    classifier_out: !ref <classifier_out>


checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        counter: !ref <epoch_counter>
        classifier_enc: !ref <classifier_enc>
        classifier_out: !ref <classifier_out>
        # lr_scheduler: !ref <lr_scheduler>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# For Librimix
pretrained_separator: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <save_folder>
    loadables:
        encoder: !ref <Encoder>
        decoder: !ref <Decoder>
        masknet: !ref <MaskNet>
    paths:
        encoder: speechbrain/sepformer-whamr/encoder.ckpt
        decoder: speechbrain/sepformer-whamr/decoder.ckpt
        masknet: speechbrain/sepformer-whamr/masknet.ckpt
